{
  "Exports": {
    "*MethodHandler.ServeHTTP": "(*MethodHandler) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "*MethodHandler.ServeHandle": "(*MethodHandler) ServeHandle(net/http.Handler,net/http.ResponseWriter,*net/http.Request)",
    "*MethodHandler.Wrap": "(*MethodHandler) Wrap(net/http.Handler) net/http.Handler",
    "After": "func (net/http.Handler) github.com/go-on/wrap.Wrapper",
    "AfterFunc": "type AfterFunc (net/http.ResponseWriter,*net/http.Request)",
    "AfterFunc.ServeHandle": "(AfterFunc) ServeHandle(net/http.Handler,net/http.ResponseWriter,*net/http.Request)",
    "AfterFunc.Wrap": "(AfterFunc) Wrap(net/http.Handler) net/http.Handler",
    "And": "func (...Matcher) Matcher",
    "Around": "func (net/http.Handler,net/http.Handler) github.com/go-on/wrap.Wrapper",
    "AroundFunc": "func ((net/http.ResponseWriter,*net/http.Request),(net/http.ResponseWriter,*net/http.Request)) github.com/go-on/wrap.Wrapper",
    "Before": "func (net/http.Handler) github.com/go-on/wrap.Wrapper",
    "BeforeFunc": "type BeforeFunc (net/http.ResponseWriter,*net/http.Request)",
    "BeforeFunc.ServeHandle": "(BeforeFunc) ServeHandle(net/http.Handler,net/http.ResponseWriter,*net/http.Request)",
    "BeforeFunc.Wrap": "(BeforeFunc) Wrap(net/http.Handler) net/http.Handler",
    "CSSContentType": "ContentType(\"text/css; charset=utf-8\")",
    "CSSString": "type CSSString string",
    "CSSString.ServeHTTP": "(CSSString) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "CSSString.Wrap": "(CSSString) Wrap(net/http.Handler) net/http.Handler",
    "Catch": "func (Catcher) github.com/go-on/wrap.Wrapper",
    "CatchFunc": "type CatchFunc (interface{},net/http.ResponseWriter,*net/http.Request)",
    "CatchFunc.Catch": "(CatchFunc) Catch(interface{},net/http.ResponseWriter,*net/http.Request)",
    "CatchFunc.ServeHandle": "(CatchFunc) ServeHandle(net/http.Handler,net/http.ResponseWriter,*net/http.Request)",
    "CatchFunc.Wrap": "(CatchFunc) Wrap(net/http.Handler) net/http.Handler",
    "Catcher": "type Catcher interface {Catch(interface{},net/http.ResponseWriter,*net/http.Request)}",
    "ContentType": "type ContentType string",
    "ContentType.ServeHandle": "(ContentType) ServeHandle(net/http.Handler,net/http.ResponseWriter,*net/http.Request)",
    "ContentType.Wrap": "(ContentType) Wrap(net/http.Handler) net/http.Handler",
    "DELETEHandler": "func (string,net/http.Handler) *matchHandler",
    "Dispatch": "func (Dispatcher) DispatchFunc",
    "DispatchFunc": "type DispatchFunc (*net/http.Request) net/http.Handler",
    "DispatchFunc.Dispatch": "(DispatchFunc) Dispatch(*net/http.Request) net/http.Handler",
    "DispatchFunc.ServeHTTP": "(DispatchFunc) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "DispatchFunc.ServeHandle": "(DispatchFunc) ServeHandle(net/http.Handler,net/http.ResponseWriter,*net/http.Request)",
    "DispatchFunc.Wrap": "(DispatchFunc) Wrap(net/http.Handler) net/http.Handler",
    "Dispatcher": "type Dispatcher interface {Dispatch(*net/http.Request) net/http.Handler}",
    "ETag": "etag{}",
    "FilterBody": "func (github.com/go-on/method.Method) github.com/go-on/wrap.Wrapper",
    "First": "func (...http.Handler) github.com/go-on/wrap.Wrapper",
    "FirstFunc": "func (...func(w http.ResponseWriter, r *http.Request)) github.com/go-on/wrap.Wrapper",
    "GETHandler": "func (string,net/http.Handler) *matchHandler",
    "GZip": "_gzip{}",
    "Guard": "func (net/http.Handler) github.com/go-on/wrap.Wrapper",
    "GuardFunc": "type GuardFunc (net/http.ResponseWriter,*net/http.Request)",
    "GuardFunc.ServeHandle": "(GuardFunc) ServeHandle(net/http.Handler,net/http.ResponseWriter,*net/http.Request)",
    "GuardFunc.Wrap": "(GuardFunc) Wrap(net/http.Handler) net/http.Handler",
    "HEADHandler": "func (string,net/http.Handler) *matchHandler",
    "HTMLContentType": "ContentType(\"text/html; charset=utf-8\")",
    "HTMLString": "type HTMLString string",
    "HTMLString.ServeHTTP": "(HTMLString) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "HTMLString.Wrap": "(HTMLString) Wrap(net/http.Handler) net/http.Handler",
    "Head": "func () github.com/go-on/wrap.Wrapper",
    "IfMatch": "func (net/http.Handler) github.com/go-on/wrap.Wrapper",
    "IfNoneMatch": "ifNoneMatch{}",
    "JSONContentType": "ContentType(\"application/json; charset=utf-8\")",
    "JSONString": "type JSONString string",
    "JSONString.ServeHTTP": "(JSONString) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "JSONString.Wrap": "(JSONString) Wrap(net/http.Handler) net/http.Handler",
    "JavaScriptContentType": "ContentType(\"application/javascript; charset=utf-8\")",
    "JavaScriptString": "type JavaScriptString string",
    "JavaScriptString.ServeHTTP": "(JavaScriptString) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "JavaScriptString.Wrap": "(JavaScriptString) Wrap(net/http.Handler) net/http.Handler",
    "Map": "func (...interface{}) DispatchFunc",
    "MatchFragment": "type MatchFragment string",
    "MatchFragment.Match": "(MatchFragment) Match(*net/http.Request) bool",
    "MatchFunc": "type MatchFunc (*net/http.Request) bool",
    "MatchFunc.Match": "(MatchFunc) Match(*net/http.Request) bool",
    "MatchHeader": "func (string,string) Matcher",
    "MatchHost": "type MatchHost string",
    "MatchHost.Match": "(MatchHost) Match(*net/http.Request) bool",
    "MatchHostRegex": "func (*regexp.Regexp) Matcher",
    "MatchMethod": "type MatchMethod string",
    "MatchMethod.Match": "(MatchMethod) Match(*net/http.Request) bool",
    "MatchPath": "type MatchPath string",
    "MatchPath.Match": "(MatchPath) Match(*net/http.Request) bool",
    "MatchPathRegex": "func (*regexp.Regexp) Matcher",
    "MatchQuery": "func (string,string) Matcher",
    "MatchScheme": "type MatchScheme string",
    "MatchScheme.Match": "(MatchScheme) Match(*net/http.Request) bool",
    "Matcher": "type Matcher interface {Match(*net/http.Request) bool}",
    "MethodHandler": "type MethodHandler struct {DELETE net/http.Handler; GET net/http.Handler; HEAD net/http.Handler; OPTIONS net/http.Handler; PATCH net/http.Handler; POST net/http.Handler; PUT net/http.Handler}",
    "MethodOverride": "func () methodOverride",
    "OPTIONSHandler": "func (string,net/http.Handler) *matchHandler",
    "Or": "func (...Matcher) Matcher",
    "PATCHHandler": "func (string,net/http.Handler) *matchHandler",
    "POSTHandler": "func (string,net/http.Handler) *matchHandler",
    "PUTHandler": "func (string,net/http.Handler) *matchHandler",
    "Reader": "func (io.ReadSeeker) github.com/go-on/wrap.Wrapper",
    "RemoveRequestHeader": "type RemoveRequestHeader string",
    "RemoveRequestHeader.ServeHandle": "(RemoveRequestHeader) ServeHandle(net/http.Handler,net/http.ResponseWriter,*net/http.Request)",
    "RemoveRequestHeader.Wrap": "(RemoveRequestHeader) Wrap(net/http.Handler) net/http.Handler",
    "RemoveResponseHeader": "type RemoveResponseHeader string",
    "RemoveResponseHeader.ServeHandle": "(RemoveResponseHeader) ServeHandle(net/http.Handler,net/http.ResponseWriter,*net/http.Request)",
    "RemoveResponseHeader.Wrap": "(RemoveResponseHeader) Wrap(net/http.Handler) net/http.Handler",
    "SetRequestHeader": "func (string,string) github.com/go-on/wrap.Wrapper",
    "SetResponseHeader": "func (string,string) github.com/go-on/wrap.Wrapper",
    "Stop": "func () github.com/go-on/wrap.Wrapper",
    "TextContentType": "ContentType(\"text/plain; charset=utf-8\")",
    "TextString": "type TextString string",
    "TextString.ServeHTTP": "(TextString) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "TextString.Wrap": "(TextString) Wrap(net/http.Handler) net/http.Handler",
    "init": ""
  },
  "Imports": {
    "github.com/go-on/method.DELETE": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.GET": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.HEAD": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.Method": "type Method int",
    "github.com/go-on/method.Method.EmptyBody": "(Method) EmptyBody() bool",
    "github.com/go-on/method.Method.IsIdempotent": "(Method) IsIdempotent() bool",
    "github.com/go-on/method.Method.IsResponseCacheable": "(Method) IsResponseCacheable() bool",
    "github.com/go-on/method.Method.IsSafe": "(Method) IsSafe() bool",
    "github.com/go-on/method.Method.String": "(Method) String() string",
    "github.com/go-on/method.PATCH": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.PUT": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.StringToMethod": "map[string]Method{\n\u0009\"POST\":\u0009POST,\n\u0009\"GET\":\u0009GET,\n\u0009\"PUT\":\u0009PUT,\n\u0009\"DELETE\":\u0009DELETE,\n\u0009\"PATCH\":\u0009PATCH,\n\u0009\"OPTIONS\":\u0009OPTIONS,\n\u0009\"HEAD\":\u0009HEAD,\n\u0009\"TRACE\":\u0009TRACE,\n}",
    "github.com/go-on/method.init": "",
    "github.com/go-on/wrap-contrib/helper.NewResponseBuffer": "func (net/http.ResponseWriter) *ResponseBuffer",
    "github.com/go-on/wrap-contrib/helper.init": "",
    "github.com/go-on/wrap.ServeHandle": "func (ServeHandler,net/http.Handler) net/http.Handler",
    "github.com/go-on/wrap.Wrapper": "type Wrapper interface {Wrap(net/http.Handler) net/http.Handler}",
    "github.com/go-on/wrap.init": ""
  },
  "Path": "github.com/go-on/wrap-contrib/wraps"
}
